---
// src/components/layout/SectionWrapper.astro
interface Props {
  variant?: 'hero' | 'content' | 'proof' | 'story' | 'minimal' | 'accent';
  prose?: boolean;
  spacing?: 'compact' | 'normal' | 'spacious';
  width?: 'prose' | 'narrow' | 'wide';
}
const { variant = 'content', prose = true, spacing = 'normal', width } = Astro.props as Props;

const bgByVariant: Record<string,string> = {
  hero: 'bg-background-primary',
  content: 'bg-background-primary',
  proof: 'bg-background-primary',
  story: 'bg-background-primary',
  minimal: 'bg-background-primary',
  accent: 'bg-background-primary border border-border-default/70 shadow-[0_0_40px_rgba(37,99,235,0.15)]',
};

// Verbesserter Rhythm mit Design-Token-basierten Abst√§nden
const rhythm: Record<string, Record<string, string>> = {
  hero: {
    compact: 'py-16 md:py-24',
    normal: 'py-20 md:py-28',
    spacious: 'py-24 md:py-32',
  },
  content: {
    compact: 'py-16 md:py-24',
    normal: 'py-20 md:py-28',
    spacious: 'py-24 md:py-32',
  },
  proof: {
    compact: 'py-16 md:py-24',
    normal: 'py-20 md:py-28',
    spacious: 'py-24 md:py-32',
  },
  story: {
    compact: 'py-16 md:py-24',
    normal: 'py-20 md:py-28',
    spacious: 'py-24 md:py-32',
  },
  minimal: {
    compact: 'py-12 md:py-16',
    normal: 'py-16 md:py-20',
    spacious: 'py-20 md:py-24',
  },
  accent: {
    compact: 'py-16 md:py-24',
    normal: 'py-20 md:py-28',
    spacious: 'py-24 md:py-32',
  },
};

const sectionClasses = [
  bgByVariant[variant] || bgByVariant.content,
  'overflow-hidden relative',
  `variant-${variant}`,
  rhythm[variant]?.[spacing] || rhythm.content.normal,
].join(' ');

const isHero = variant === 'hero';

const resolvedWidth: 'prose' | 'narrow' | 'wide' = width
  ? width
  : isHero
    ? 'wide'
    : prose
      ? 'prose'
      : 'narrow';

const innerClasses = ['space-y-8'];
const widthClassMap: Record<'prose' | 'narrow' | 'wide', string[]> = {
  prose: ['content-prose', 'prose-improved'],
  narrow: ['content-narrow'],
  wide: ['content-wide'],
};
innerClasses.push(...widthClassMap[resolvedWidth]);

const containerClasses = ['container-responsive'];
if (resolvedWidth === 'wide') {
  containerClasses.push('max-w-6xl', 'lg:max-w-7xl');
} else if (variant === 'accent') {
  containerClasses.push('max-w-4xl', 'md:max-w-5xl');
} else {
  containerClasses.push('max-w-5xl');
}
---
<section class={sectionClasses}>
  <div class={containerClasses.join(' ')}>
    {isHero ? (
      <div class="grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
        <slot />
      </div>
    ) : (
      <div class={innerClasses.join(' ')}>
        <slot />
      </div>
    )}
  </div>
</section>
